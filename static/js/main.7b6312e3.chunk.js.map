{"version":3,"sources":["components/ModelProvider.js","webgl/math.js","webgl/colour.js","webgl/julia.js","webgl.js","components/DebugFrame.js","components/ControlPanel/HelpTooltip.js","components/ControlPanel/LabelledField.js","components/ControlPanel/MaxIterations.js","components/ControlPanel/Translate.js","components/ControlPanel/Viewport.js","components/ControlPanel/ComplexPoly.js","components/CollapsiblePanel.js","components/PauseButton.js","components/ControlPanel/CValue.js","components/PresetSaver.js","components/ControlPanel/ControlPanel.js","components/ShaderCanvas.js","App.js","serviceWorker.js","index.js"],"names":["ShaderContext","React","createContext","ShaderProvider","Provider","isUseState","Consumer","item","Array","isArray","length","name","hasSetState","contextToValueObject","obj","namesObject","console","log","loadObjectIntoContext","ctx","setState","ModelProvider","children","initModelState","canvasRef","useState","gl","julia","c","x","y","complexPoly","escapeRadius","maxIterations","viewport","width","height","translate","time","startedAt","Date","now","paused","lastPausedAt","pauseDuration","timeScale","value","math","colour","buildFragCode","val","cValue","main","vertCode","vertices","indices","setUniforms","shaderProgram","escapeRadiusUniform","getUniformLocation","uniform1f","maxIterationsUniform","uniform1i","resolutionUniform","uniform2fv","startedAtUniform","secondsSinceStart","widthUniform","heightUniform","xTranslateUniform","yTranslateUniform","glDrawFrame","fragCode","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","bindVertices","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","bindIndices","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","useProgram","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","clearColor","enable","DEPTH_TEST","clear","COLOR_BUFFER_BIT","drawElements","TRIANGLES","UNSIGNED_SHORT","alert","DebugFrame","frameCount","frameTime","className","HelpTooltip","hoverText","LabelledField","label","helpText","inputValue","setInputValue","onChange","event","target","MaxIterations","useContext","TranslateX","translateX","setTranslateX","TranslateY","translateY","setTranslateY","Translate","Width","setWidth","Height","setHeight","Viewport","ComplexPoly","PanelToggleButton","open","setOpen","onClick","CollapsiblePanel","styleClass","PauseButton","setPaused","setLastPausedAt","setPauseDuration","CValueX","CValueY","CValue","getPresetArray","presetArray","localStorage","getItem","JSON","parse","PresetSaver","selectedPreset","setSelectedPreset","presetName","setPresetName","presetsList","setPresetsList","updatePresetsList","presets","useEffect","e","map","key","presetObject","makePresetObject","array","preset","namedPresetExists","push","setItem","stringify","addPresetToArray","i","Spacer","size","style","marginBottom","ControlPanel","ShaderCanvas","setCanvasRef","setGl","useRef","animateRef","setFrameCount","lastFrameTime","setLastFrameTime","current","getContext","requestAnimationFrame","animate","cancelAnimationFrame","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b6312e3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport const ShaderContext = React.createContext()\r\nexport const ShaderProvider = ShaderContext.Provider\r\nexport const ShaderConsumer = ShaderContext.Consumer\r\n\r\n/*\r\n  Take object from context and extract the values for each setState array\r\n  Recurse down if possilble and maintain k:v structure\r\n*/\r\n\r\n// Check to see if array has useState set function within\r\nconst hasSetState = item => {\r\n  return typeof item[1] === 'function' && item[1].name === 'bound dispatchAction'\r\n}\r\n\r\n// Is the item a useState array?\r\n// Perform checks on requirements for hasSetState beforehand\r\nconst isUseState = item => {\r\n  return Array.isArray(item) && item.length === 2 && hasSetState(item)\r\n}\r\n\r\n// Flattens out a object from the state context\r\n// Keeps object structure, but converts [state, setState]\r\n// Arrays to just the state value\r\nexport function contextToValueObject(obj) {\r\n  const namesObject = {}\r\n  console.log(obj)\r\n  for (const item in obj) {\r\n    if (isUseState(obj[item])) {\r\n      namesObject[item] = obj[item][0]\r\n    } else if (typeof obj[item] === 'object') {\r\n      namesObject[item] = contextToValueObject(obj[item])\r\n    }\r\n  }\r\n\r\n  return namesObject\r\n}\r\n\r\nexport function loadObjectIntoContext(obj, ctx) {\r\n  for (const item in obj) {\r\n    if (isUseState(ctx[item])) {\r\n      // Call setState in ctx for each key in obj\r\n      const setState = ctx[item][1]\r\n      setState(obj[item])\r\n    } else if (typeof obj[item] === 'object') {\r\n      // Recurse\r\n      loadObjectIntoContext(obj[item], ctx[item])\r\n    }\r\n  }\r\n}\r\n\r\nfunction ModelProvider({ children }) {\r\n  const initModelState = {\r\n    canvasRef: useState(null), // Canvas element used for rendering the fractal\r\n    gl: useState(null), // WebGL context of the canvas\r\n    julia: {\r\n      c: {\r\n        x: useState(0.2),\r\n        y: useState('sin(u_time)'),\r\n      },\r\n      complexPoly: useState('z^2 + c'), // Complex Quadratic Polynomial\r\n      escapeRadius: useState(4.0), // TODO: Does this stay constant for every polynomial?\r\n      maxIterations: useState(20),\r\n    },\r\n    viewport: {\r\n      width: useState('3.'),\r\n      height: useState('3.'),\r\n      translate: {\r\n        x: useState('0.'),\r\n        y: useState('0.'),\r\n      },\r\n    },\r\n    time: {\r\n      startedAt: useState(Date.now()),\r\n      paused: useState(false),\r\n      lastPausedAt: useState(0),\r\n      pauseDuration: useState(0),\r\n      timeScale: useState(0.3),\r\n    },\r\n  }\r\n\r\n  return <ShaderProvider value={initModelState}>{children}</ShaderProvider>\r\n}\r\n\r\nModelProvider.propTypes = {}\r\n\r\nexport default ModelProvider\r\n","//\r\n// MATHEMATICAL CONSTANTS\r\n//\r\nconst mathConstants = `\r\n#define PI 3.14159265359\r\n#define TAU 6.28318530718\r\n`\r\n\r\n//\r\n// COMPLEX NUMBER OPERATIONS\r\n// Source: https://gist.github.com/NiklasRosenstein/ee1f1b5786f94e17995361c63dafeb3f\r\n//\r\nconst complexConjug = `\r\nvec2 complexConjug(in vec2 c) { \r\n  return vec2(c.x, -c.y); \r\n}\r\n`\r\n\r\nconst complexMult = `\r\nvec2 complexMult(in vec2 a, in vec2 b) {\r\n  return vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\r\n}\r\n`\r\n\r\nconst complexDiv = `\r\nvec2 complexDiv(in vec2 a, in vec2 b) {\r\n  return complexMult(a, complexConjug(b));\r\n}\r\n`\r\n\r\nconst complexMag = `\r\nfloat complexMag(in vec2 c) { \r\n  return sqrt(c.x * c.x + c.y * c.y); \r\n}\r\n`\r\n\r\nconst complexAdd = `\r\nvec2 complexAdd(vec2 z1, vec2 z2) { \r\n  return vec2(z1.x + z2.x, z1.y + z2.y); \r\n}\r\n`\r\n\r\n// See http://mathworld.wolfram.com/ComplexExponentiation.html\r\n// Raises a complex number to the power of a second complex number\r\n// Use vec2(x, 0) as second parameter to raise by only a real\r\nconst complexPower = `\r\nvec2 complexPower(vec2 z1, vec2 z2) {\r\n  float a2b2 = z1.x * z1.x + z1.y * z1.y;\r\n  float t1 = pow(a2b2, z2.x / 2.) * exp(-z2.y * atan(z1.y, z1.x));\r\n  float t2 = z2.x * atan(z1.y, z1.x) + .5 * z2.y * log(a2b2);\r\n  return vec2(t1 * cos(t2), t1 * sin(t2));\r\n}\r\n`\r\n\r\nexport const math = `\r\n${mathConstants}\r\n${complexConjug}\r\n${complexMult}\r\n${complexDiv}\r\n${complexMag}\r\n${complexPower}\r\n${complexAdd}\r\n`","//\r\n// COLOUR SPACE FUNCTIONS\r\n//\r\nconst hsv2rgb = `\r\nvec3 hsv2rgb(vec3 c) {\r\n  vec4 K = vec4(1., 2. / 3., 1. / 3., 3.);\r\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6. - K.www);\r\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0., 1.), c.y);\r\n}\r\n`\r\n\r\n//\r\n// JULIA ITERATIONS HSV COLOURING FUNCTIONS\r\n//\r\nconst huefn = `\r\nfloat huefn(float iterations) {\r\n  float max_iter = float(maxIterations);\r\n  return .1 + .6*(iterations / max_iter);\r\n}\r\n`\r\n\r\nconst satfn = `\r\nfloat satfn(float iterations) {\r\n  float max_iter = float(maxIterations);\r\n  return .1 + 3.*(iterations / max_iter);\r\n}\r\n`\r\n\r\nconst valfn = `\r\nfloat valfn(float iterations) {\r\n  float max_iter = float(maxIterations);\r\n  return .1 + 4.*(iterations / max_iter);\r\n}\r\n`\r\n\r\nexport const colour = `\r\n${hsv2rgb}\r\n${huefn}\r\n${satfn}\r\n${valfn}\r\n`\r\n","import { math } from './math'\r\nimport { colour } from './colour'\r\n\r\n// GLSL 'for' loops can only be indexed up to a constant value\r\n// Passing in the max iteration count through a uniform encounters an error\r\n// Therefore this function constructs a constant value definition\r\nfunction maxIterations(val) {\r\n  return `#define maxIterations ${val}`\r\n}\r\n\r\nfunction cValue({x, y}) {\r\n  return `vec2 c = vec2(${x}, ${y});`\r\n}\r\n\r\nfunction viewport({width, height, translate}) {\r\n  return `\r\n  float XSIZE = ${width};\r\n  float YSIZE = ${height};\r\n  float XT = ${translate.x};\r\n  float YT = ${translate.y};\r\n  `\r\n}\r\n\r\nconst uniforms = `\r\nuniform float u_escapeRadius;\r\n\r\nuniform vec2 u_resolution;\r\nuniform float u_time;\r\nuniform float u_width;\r\nuniform float u_height;\r\nuniform float u_translatex;\r\nuniform float u_translatey;\r\n`\r\n\r\nconst headers = `\r\nprecision highp float;\r\n`\r\n\r\n//\r\n// JULIA ITERATION FUNCTIONS\r\n//\r\nconst julia = `\r\nvec3 julia(vec2 z, vec2 c) {\r\n  float result;\r\n  int iters = 0;\r\n\r\n  for (int i = 0; i <= maxIterations; i++) {\r\n    z = complexPower(z, vec2(2, 0));\r\n    z = complexAdd(z, c);\r\n    iters = i;\r\n    if (complexMag(z) > u_escapeRadius) break;\r\n  }\r\n\r\n  if (iters == maxIterations) {\r\n    result = float(iters);\r\n    return vec3(0, 0, 0);\r\n  } else {\r\n    result = smoothIterations(z, iters);\r\n  }\r\n\r\n  //result = float(iters);\r\n\r\n  float hue = huefn(result);\r\n  float sat = satfn(result);\r\n  float val = valfn(result);\r\n  return hsv2rgb(vec3(hue, sat, val));\r\n}\r\n`\r\n\r\n// Smooth colouring function\r\n// http://linas.org/art-gallery/escape/escape.html\r\n// https://en.wikipedia.org/wiki/Mandelbrot_set#Continuous_(smooth)_coloring\r\nconst smoothIterations = `\r\nfloat smoothIterations(vec2 z, int iterations) {\r\n  // sqrt of inner term removed using log simplification rules.\r\n  // sqrt is equivilent to raising to power 0.5 therefore dividing\r\n  // by 2 or multiplying by 0.5 avoids an inefficient sqrt calculation\r\n  float log_zn = log(z.x * z.x + z.y * z.y) / 2.;\r\n  float nu = log(log_zn / log(2.)) / log(2.);\r\n  // Rearranging the potential function.\r\n  // Dividing log_zn by log(2) instead of log(N = 1<<8)\r\n  // because we want the entire palette to range from the\r\n  // center to radius 2, NOT our bailout radius.\r\n  return float(iterations) + 1. - nu;\r\n}\r\n`\r\n\r\n//\r\n// JULIA MAIN FUNCTION\r\n//\r\nconst main = ctx => `\r\nvoid main(void) {\r\n  ${viewport(ctx.viewport)}\r\n\r\n  ${cValue(ctx.julia.c)}\r\n\r\n\r\n  // Normalized pixel coordinates (from 0 to 1)\r\n  vec2 uv = gl_FragCoord.xy / u_resolution.xy;\r\n\r\n  vec2 z;\r\n  z.x = (XSIZE * (uv.x - .5)) + XT;\r\n  z.y = (YSIZE * (uv.y - .5)) + YT;\r\n\r\n  vec3 col = julia(z, c);\r\n  gl_FragColor = vec4(col, 1.);\r\n}\r\n`\r\n\r\nexport const buildFragCode = ctx => `\r\n${headers}\r\n${maxIterations(ctx.julia.maxIterations)}\r\n${uniforms}\r\n${math}\r\n${colour}\r\n${smoothIterations}\r\n${julia}\r\n${main(ctx)}\r\n`\r\n\r\nexport const vertCode = `\r\nattribute vec3 coordinates;\r\n\r\nvoid main(void) {\r\n  gl_Position = vec4(coordinates, 1.0);\r\n}\r\n`\r\n","import { buildFragCode, vertCode } from './webgl/julia'\r\n\r\n//\r\n// WebGL initialisation and render loop\r\n// Code adapted from https://observablehq.com/@tomktjemsland/simple-webgl\r\n//\r\n\r\n// Define a square composed of two triangles\r\nconst vertices = [-1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0]\r\n// Index vertices in groups of 3\r\nconst indices = [3, 2, 1, 3, 1, 0]\r\n\r\nfunction bindVertices(gl) {\r\n  // Create an empty buffer object to store vertex buffer\r\n  const vertexBuffer = gl.createBuffer()\r\n  // Bind appropriate array buffer to it\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\r\n  // Pass the vertex data to the buffer\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n  // Unbind the buffer\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, null)\r\n\r\n  return vertexBuffer\r\n}\r\n\r\nfunction bindIndices(gl) {\r\n  // Create an empty buffer object to store Index buffer\r\n  const indexBuffer = gl.createBuffer()\r\n  // Bind appropriate array buffer to it\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\r\n  // Pass the vertex data to the buffer\r\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW)\r\n  // Unbind the buffer\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)\r\n\r\n  return indexBuffer\r\n}\r\n\r\nfunction createProgram(gl, fragCode) {\r\n  // Create a vertex shader object\r\n  const vertShader = gl.createShader(gl.VERTEX_SHADER)\r\n\r\n  // Attach vertex shader source code\r\n  gl.shaderSource(vertShader, vertCode)\r\n\r\n  // Compile the vertex shader\r\n  gl.compileShader(vertShader)\r\n\r\n  // Create fragment shader object\r\n  const fragShader = gl.createShader(gl.FRAGMENT_SHADER)\r\n\r\n  // Attach fragment shader source code\r\n  gl.shaderSource(fragShader, fragCode)\r\n\r\n  // Compile the fragmentt shader\r\n  gl.compileShader(fragShader)\r\n\r\n  // Create a shader program object to\r\n  // store the combined shader program\r\n  const shaderProgram = gl.createProgram()\r\n\r\n  // Attach a vertex shader\r\n  gl.attachShader(shaderProgram, vertShader)\r\n\r\n  // Attach a fragment shader\r\n  gl.attachShader(shaderProgram, fragShader)\r\n\r\n  // Link both the programs\r\n  gl.linkProgram(shaderProgram)\r\n\r\n  // Use the combined shader program object\r\n  gl.useProgram(shaderProgram)\r\n\r\n  if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {\r\n    console.log(gl.getShaderInfoLog(fragShader))\r\n    console.log(fragCode)\r\n  }\r\n\r\n  if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {\r\n    console.log(gl.getShaderInfoLog(vertShader))\r\n  }\r\n\r\n  return shaderProgram\r\n}\r\n\r\nfunction setUniforms(shaderProgram, ctx) {\r\n  const { canvasRef, gl, julia, time, viewport } = ctx\r\n  const { escapeRadius, maxIterations } = julia\r\n\r\n  const escapeRadiusUniform = gl.getUniformLocation(shaderProgram, 'u_escapeRadius')\r\n  gl.uniform1f(escapeRadiusUniform, escapeRadius)\r\n\r\n  const maxIterationsUniform = gl.getUniformLocation(shaderProgram, 'u_maxIterations')\r\n  gl.uniform1i(maxIterationsUniform, maxIterations)\r\n\r\n  const resolutionUniform = gl.getUniformLocation(shaderProgram, 'u_resolution')\r\n  gl.uniform2fv(resolutionUniform, [canvasRef.width, canvasRef.height])\r\n\r\n  const startedAtUniform = gl.getUniformLocation(shaderProgram, 'u_time')\r\n  const secondsSinceStart = (getMillisElapsed(time.startedAt, time.pauseDuration) / 1000) * time.timeScale\r\n  gl.uniform1f(startedAtUniform, secondsSinceStart)\r\n\r\n  const widthUniform = gl.getUniformLocation(shaderProgram, 'u_width')\r\n  gl.uniform1f(widthUniform, viewport.width)\r\n\r\n  const heightUniform = gl.getUniformLocation(shaderProgram, 'u_height')\r\n  gl.uniform1f(heightUniform, viewport.height)\r\n\r\n  const xTranslateUniform = gl.getUniformLocation(shaderProgram, 'u_translatex')\r\n  gl.uniform1f(xTranslateUniform, viewport.translate.x)\r\n\r\n  const yTranslateUniform = gl.getUniformLocation(shaderProgram, 'u_translatey')\r\n  gl.uniform1f(yTranslateUniform, viewport.translate.y)\r\n}\r\n\r\nfunction getMillisElapsed(startedAt, pauseDuration) {\r\n  return Date.now() - startedAt - pauseDuration\r\n}\r\n\r\nexport function glDrawFrame(ctx) {\r\n  const { canvasRef, gl } = ctx\r\n\r\n  // Only continue if WebGL is available and working\r\n  if (gl === null) {\r\n    alert('Unable to initialize WebGL. Your browser or machine may not support it.')\r\n    return\r\n  }\r\n\r\n  // Construct the final version of the fragment shader code\r\n  const fragCode = buildFragCode(ctx)\r\n\r\n  const vertexBuffer = bindVertices(gl)\r\n  const indexBuffer = bindIndices(gl)\r\n  const shaderProgram = createProgram(gl, fragCode)\r\n  setUniforms(shaderProgram, ctx)\r\n\r\n  /*======= Associating shaders to buffer objects =======*/\r\n  // Bind vertex buffer object\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\r\n\r\n  // Bind index buffer object\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\r\n\r\n  // Get the attribute location\r\n  const coord = gl.getAttribLocation(shaderProgram, 'coordinates')\r\n\r\n  // Point an attribute to the currently bound VBO\r\n  gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0)\r\n\r\n  // Enable the attribute\r\n  gl.enableVertexAttribArray(coord)\r\n\r\n  /*============= Drawing the Quad ================*/\r\n  // Clear the canvas\r\n  gl.clearColor(0, 0, 0, 1)\r\n\r\n  // Enable the depth test\r\n  gl.enable(gl.DEPTH_TEST)\r\n\r\n  // Clear the color buffer bit\r\n  gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n  // Set the view port\r\n  gl.viewport(0, 0, canvasRef.width, canvasRef.height)\r\n\r\n  // Draw the triangles\r\n  gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0)\r\n}\r\n","import React from 'react'\r\n\r\nexport default function DebugFrame({frameCount, frameTime}) {\r\n\r\n  return (\r\n    <div className='frametime'>\r\n      <p>Frames: {frameCount}</p>\r\n      <p>Frametime: {frameTime}ms</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function HelpTooltip({hoverText}) {\r\n  return (\r\n    <div className='tooltip'>\r\n      <span className='tooltip-text'>{hoverText}</span>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport HelpTooltip from './HelpTooltip';\r\n\r\nexport default function LabelledField({ label, helpText, inputValue, setInputValue }) {\r\n  function handleChange(event) {\r\n    setInputValue(event.target.value)\r\n    inputValue = event.target.value\r\n  }\r\n\r\n  return (\r\n    <div className='field-container'>\r\n      <span className='panel-label'>{label}</span>\r\n      {helpText ? <HelpTooltip hoverText={helpText} /> : null}\r\n      <input className='panel-input' name={label} value={inputValue} onChange={handleChange} />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ShaderContext } from './../ModelProvider'\r\nimport LabelledField from './LabelledField'\r\n\r\nexport default function MaxIterations() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [inputValue, setInputValue] = ctx.julia.maxIterations\r\n\r\n  const helpText = 'Max iterations'\r\n\r\n  return <LabelledField label='Max Iterations' helpText={helpText} inputValue={inputValue} setInputValue={setInputValue} />\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ShaderContext } from './../ModelProvider'\r\nimport LabelledField from './LabelledField'\r\n\r\nfunction TranslateX() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [translateX, setTranslateX] = ctx.viewport.translate.x\r\n\r\n  const helpText = 'Translate x'\r\n\r\n  return <LabelledField label='Translate X' helpText={helpText} inputValue={translateX} setInputValue={setTranslateX} />\r\n}\r\n\r\nfunction TranslateY() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [translateY, setTranslateY] = ctx.viewport.translate.y\r\n\r\n  const helpText = 'Translate y'\r\n\r\n  return <LabelledField label='Translate Y' helpText={helpText} inputValue={translateY} setInputValue={setTranslateY} />\r\n}\r\n\r\nexport default function Translate() {\r\n  return (\r\n    <>\r\n      <TranslateX />\r\n      <TranslateY />\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Translate from './Translate'\r\nimport { ShaderContext } from '../ModelProvider'\r\nimport LabelledField from './LabelledField'\r\n\r\nfunction Width() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [width, setWidth] = ctx.viewport.width\r\n\r\n  const helpText = 'Viewport width'\r\n\r\n  return <LabelledField label='Viewport Width' helpText={helpText} inputValue={width} setInputValue={setWidth} />\r\n}\r\n\r\nfunction Height() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [height, setHeight] = ctx.viewport.height\r\n\r\n  const helpText = 'Viewport height'\r\n\r\n  return <LabelledField label='Viewport Height' helpText={helpText} inputValue={height} setInputValue={setHeight} />\r\n}\r\n\r\nexport default function Viewport() {\r\n  return (\r\n    <>\r\n      <Width />\r\n      <Height />\r\n      <Translate />\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ShaderContext } from '../ModelProvider'\r\nimport LabelledField from './LabelledField'\r\n\r\nexport default function ComplexPoly() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [inputValue, setInputValue] = ctx.julia.complexPoly\r\n\r\n  const helpText = 'Complex poly quadratic'\r\n\r\n  return <LabelledField label='CPQ' helpText={helpText} inputValue={inputValue} setInputValue={setInputValue} />\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nfunction PanelToggleButton({open, setOpen}) {\r\n\r\n\r\n  function togglePanel(event) {\r\n    if (open === true) {\r\n      setOpen(false)\r\n    } else if (open === false) {\r\n      setOpen(true)\r\n    }\r\n  }\r\n\r\n  return(\r\n    <button onClick={togglePanel} className='panel-toggle'>{open ? '<<<' : '>>>'}</button>\r\n  )\r\n}\r\n\r\nexport default function CollapsiblePanel({children, styleClass}) {\r\n  const [open, setOpen] = useState(true)\r\n\r\n\r\n  return (\r\n    <div className={`${styleClass} panel ${open ? 'panel-open' : 'panel-closed'}`} >\r\n      <PanelToggleButton open={open} setOpen={setOpen}/>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ShaderContext } from './ModelProvider'\r\n\r\nexport default function PauseButton() {\r\n  const ctx = useContext(ShaderContext)\r\n\r\n  const [paused, setPaused] = ctx.time.paused\r\n  const [lastPausedAt, setLastPausedAt] = ctx.time.lastPausedAt\r\n  const [, setPauseDuration] = ctx.time.pauseDuration\r\n\r\n  function pause() {\r\n    setPaused(true)\r\n    setLastPausedAt(Date.now())\r\n  }\r\n\r\n  function resume() {\r\n    setPaused(false)\r\n    setPauseDuration(pauseDuration => pauseDuration + (Date.now() - lastPausedAt))\r\n  }\r\n\r\n  function togglePause() {\r\n    if (paused === true) {\r\n      resume()\r\n    } else if (paused === false) {\r\n      pause()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button onClick={togglePause} className='pause-button'>\r\n      {paused ? 'Resume' : 'Pause'}\r\n    </button>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ShaderContext } from '../ModelProvider'\r\nimport LabelledField from './LabelledField'\r\n\r\nfunction CValueX() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [inputValue, setInputValue] = ctx.julia.c.x\r\n\r\n  const helpText = 'C value x'\r\n\r\n  return <LabelledField label='C Y' helpText={helpText} inputValue={inputValue} setInputValue={setInputValue} />\r\n}\r\n\r\nfunction CValueY() {\r\n  const ctx = useContext(ShaderContext)\r\n  const [inputValue, setInputValue] = ctx.julia.c.y\r\n\r\n  const helpText = 'C value y'\r\n\r\n  return <LabelledField label='C X' helpText={helpText} inputValue={inputValue} setInputValue={setInputValue} />\r\n}\r\n\r\nexport default function CValue() {\r\n  return (\r\n    <>\r\n      <CValueX />\r\n      <CValueY />\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { contextToValueObject, ShaderContext, loadObjectIntoContext } from './ModelProvider'\r\nimport LabelledField from './ControlPanel/LabelledField'\r\n\r\nfunction makePresetObject(name, ctx) {\r\n  const julia = contextToValueObject(ctx.julia)\r\n  const viewport = contextToValueObject(ctx.viewport)\r\n  return {\r\n    name,\r\n    julia,\r\n    viewport\r\n  }\r\n}\r\n\r\nfunction namedPresetExists(name) {\r\n  const array = getPresetArray()\r\n  for (const preset in array) {\r\n    if (preset.name === name) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nfunction getPresetArray() {\r\n  const presetArray = localStorage.getItem('presets')\r\n  return presetArray ? JSON.parse(presetArray) : []\r\n}\r\n\r\nfunction addPresetToArray(preset) {\r\n  const array = getPresetArray()\r\n  array.push(preset)\r\n  localStorage.setItem('presets', JSON.stringify(array))\r\n}\r\n\r\nexport default function PresetSaver() {\r\n  const ctx = useContext(ShaderContext)\r\n\r\n  const [selectedPreset, setSelectedPreset] = useState('')\r\n  const [presetName, setPresetName] = useState('')\r\n  const [presetsList, setPresetsList] = useState([])\r\n\r\n  const updatePresetsList = () => {\r\n    const presets = getPresetArray()\r\n    setPresetsList(presets)\r\n  }\r\n\r\n  function savePreset() {\r\n    const presetObject = makePresetObject(presetName, ctx)\r\n    console.log(presetObject)\r\n    if (namedPresetExists(presetObject)) {\r\n      // TODO: ask to overwrite\r\n    }\r\n    addPresetToArray(presetObject)\r\n    updatePresetsList()\r\n  }\r\n\r\n  function loadPreset() {\r\n    console.log('load preset')\r\n    const presetArray = getPresetArray()\r\n    // TODO: access presetArray by key identifier\r\n    for (const i in presetArray) {\r\n      const preset = presetArray[i]\r\n      if (preset.name === selectedPreset) {\r\n        console.log('loading into conte')\r\n        loadObjectIntoContext(preset.julia, ctx.julia)\r\n        loadObjectIntoContext(preset.viewport, ctx.viewport)\r\n      }\r\n    }\r\n  }\r\n\r\n  function updateSelection(e) {\r\n    setSelectedPreset(e.target.value)\r\n  }\r\n\r\n  // Initial select element population\r\n  useEffect(() => {\r\n    updatePresetsList()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <LabelledField label='Preset name' inputValue={presetName} setInputValue={setPresetName} />\r\n      <select value={selectedPreset} onChange={updateSelection} className='panel-input preset-selector'>\r\n        {presetsList.length === 0 ? <option>No presets saved</option> : null}\r\n        {presetsList.map(item => {\r\n          return (\r\n            <option key={item.name} value={item.name}>\r\n              {item.name}\r\n            </option>\r\n          )\r\n        })}\r\n      </select>\r\n      <button className='panel-input' onClick={savePreset}>\r\n        Save\r\n      </button>\r\n      <button className='panel-input' onClick={loadPreset}>\r\n        Load\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport MaxIterations from './MaxIterations'\r\nimport Viewport from './Viewport'\r\nimport ComplexPoly from './ComplexPoly'\r\nimport CollapsiblePanel from '../CollapsiblePanel'\r\nimport PauseButton from '../PauseButton'\r\nimport CValue from './CValue'\r\nimport PresetSaver from '../PresetSaver'\r\n\r\nfunction Spacer({size}) {\r\n  return <div style={{marginBottom: size}} />\r\n}\r\n\r\nfunction ControlPanel({ children }) {\r\n  // TODO: Convert integer field values to glsl floats\r\n\r\n  return (\r\n    <CollapsiblePanel styleClass='control-panel'>\r\n      <PresetSaver />\r\n      <Spacer size='3em'/>\r\n      <MaxIterations />\r\n      <Spacer size='3em'/>\r\n      <Viewport />\r\n      <Spacer size='3em'/>\r\n      <CValue />\r\n      <ComplexPoly />\r\n      <Spacer size='3em'/>\r\n      <PauseButton />\r\n      {children}\r\n    </CollapsiblePanel>\r\n  )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React, { useRef, useEffect, useContext, useState } from 'react'\r\nimport { glDrawFrame } from '../webgl'\r\nimport { ShaderContext, contextToValueObject } from './ModelProvider'\r\nimport DebugFrame from './DebugFrame'\r\nimport ControlPanel from './ControlPanel/ControlPanel'\r\n\r\nexport default function ShaderCanvas() {\r\n  const ctx = useContext(ShaderContext)\r\n\r\n  const [, setCanvasRef] = ctx.canvasRef\r\n  const [gl, setGl] = ctx.gl\r\n  const [paused] = ctx.time.paused\r\n\r\n  const canvasRef = useRef()\r\n  const animateRef = useRef()\r\n  const [frameCount, setFrameCount] = useState(0)\r\n  const [lastFrameTime, setLastFrameTime] = useState(0)\r\n\r\n  // Initialise canvas and webgl\r\n  useEffect(() => {\r\n    setCanvasRef(canvasRef.current)\r\n    setGl(canvasRef.current.getContext('webgl'))\r\n  }, [setCanvasRef, setGl])\r\n\r\n  // Start rendering\r\n  useEffect(() => {\r\n    // Define function to be run on every frame render\r\n    const animate = () => {\r\n      if (paused === false && gl !== null) {\r\n        setLastFrameTime(Date.now())\r\n        const glObj = contextToValueObject(ctx)\r\n        glDrawFrame(glObj)\r\n        setFrameCount(frameCount => frameCount + 1)\r\n      }\r\n      // The frame request runs itself recursively\r\n      animateRef.current = requestAnimationFrame(animate)\r\n    }\r\n\r\n    // Start frame requests\r\n    animateRef.current = requestAnimationFrame(animate)\r\n\r\n    // Return cleanup as callback\r\n    return () => cancelAnimationFrame(animateRef.current)\r\n  }, [ctx, paused, gl])\r\n\r\n  return (\r\n    <>\r\n      <canvas className='glcanvas' width='1000' height='1000' ref={canvasRef} />\r\n      <ControlPanel>\r\n        <DebugFrame frameCount={frameCount} frameTime={Date.now() - lastFrameTime} />\r\n      </ControlPanel>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport ModelProvider from './components/ModelProvider'\r\nimport ShaderCanvas from './components/ShaderCanvas';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <ModelProvider>\r\n        <ShaderCanvas />\r\n      </ModelProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}